<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="PostSharp.Version.properties"/>

  <PropertyGroup>
    <_PostSharpImportedTwice Condition="'$(PostSharpImported)'=='True'">True</_PostSharpImportedTwice>
    <PostSharpImported>True</PostSharpImported>
    <PostSharp30Imported>True</PostSharp30Imported>
  </PropertyGroup>

  <!-- Import project overrides -->
  <Import Project="$(MSBuildProjectDirectory)\..\..\..\..\..\..\..\..\PostSharp.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\..\..\..\..\PostSharp.Custom.targets')"/>
  <Import Project="$(MSBuildProjectDirectory)\..\..\..\..\..\..\..\PostSharp.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\..\..\..\PostSharp.Custom.targets')"/>
  <Import Project="$(MSBuildProjectDirectory)\..\..\..\..\..\..\PostSharp.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\..\..\PostSharp.Custom.targets')"/>
  <Import Project="$(MSBuildProjectDirectory)\..\..\..\..\..\PostSharp.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\..\PostSharp.Custom.targets')"/>
  <Import Project="$(MSBuildProjectDirectory)\..\..\..\..\PostSharp.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\PostSharp.Custom.targets')"/>
  <Import Project="$(MSBuildProjectDirectory)\..\..\..\PostSharp.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\PostSharp.Custom.targets')"/>
  <Import Project="$(MSBuildProjectDirectory)\..\..\PostSharp.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\PostSharp.Custom.targets')"/>
  <Import Project="$(MSBuildProjectDirectory)\..\PostSharp.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\PostSharp.Custom.targets')"/>
  <Import Project="$(MSBuildProjectDirectory)\PostSharp.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\PostSharp.Custom.targets')"/>

  <!-- Try find the PostSharp solution-level config file. -->
  <PropertyGroup Condition="'$(SolutionDir)' != '' AND '$(SolutionDir)' != '*Undefined*'">
    <PostSharpSolutionProject Condition=" '$(PostSharpSolutionProject)'=='' AND Exists('$(SolutionDir)\$(SolutionName).$(Configuration).$(Platform).pssln') ">$(SolutionDir)\$(SolutionName).$(Configuration).$(Platform).pssln</PostSharpSolutionProject>
    <PostSharpSolutionProject Condition=" '$(PostSharpSolutionProject)'=='' AND Exists('$(SolutionDir)\$(SolutionName).$(Configuration).pssln') ">$(SolutionDir)\$(SolutionName).$(Configuration).pssln</PostSharpSolutionProject>
    <PostSharpSolutionProject Condition=" '$(PostSharpSolutionProject)'=='' AND Exists('$(SolutionDir)\$(SolutionName).pssln') ">$(SolutionDir)\$(SolutionName).pssln</PostSharpSolutionProject>
  </PropertyGroup>

  <!-- Try to find the project-level config file -->
  <PropertyGroup>
    <PostSharpProject Condition=" '$(PostSharpProject)'=='' AND Exists('$(MSBuildProjectDirectory)\$(MSBuildProjectName).$(Configuration).$(Platform).psproj') ">$(MSBuildProjectDirectory)\$(MSBuildProjectName).$(Configuration).$(Platform).psproj</PostSharpProject>
    <PostSharpProject Condition=" '$(PostSharpProject)'=='' AND Exists('$(MSBuildProjectDirectory)\$(MSBuildProjectName).$(Configuration).psproj') ">$(MSBuildProjectDirectory)\$(MSBuildProjectName).$(Configuration).psproj</PostSharpProject>
    <PostSharpProject Condition=" '$(PostSharpProject)'=='' AND Exists('$(MSBuildProjectDirectory)\$(MSBuildProjectName).psproj') ">$(MSBuildProjectDirectory)\$(MSBuildProjectName).psproj</PostSharpProject>
  </PropertyGroup>

  <!-- Set FastUpdateCheck, the mechanism in Visual Studio that determines whether it is necessary to call MSBuild. -->
  <ItemGroup>
    <UpToDateCheckInput Include="$(PostSharpSolutionProject)" Condition="'$(PostSharpSolutionProject)'!=''"/>
    <UpToDateCheckInput Include="$(PostSharpProject)" Condition="'$(PostSharpProject)'!=''"/>
    <UpToDateCheckInput Include="$(MSBuildProjectDirectory)\postsharp.config" Condition="Exists('$(MSBuildProjectDirectory)\postsharp.config')"/>
    <UpToDateCheckInput Include="$(MSBuildProjectDirectory)\..\postsharp.config" Condition="Exists('$(MSBuildProjectDirectory)\..\postsharp.config')"/>
    <UpToDateCheckInput Include="$(MSBuildProjectDirectory)\..\..\postsharp.config" Condition="Exists('$(MSBuildProjectDirectory)\..\..\postsharp.config')"/>
    <UpToDateCheckInput Include="$(MSBuildProjectDirectory)\..\..\..\postsharp.config" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\postsharp.config')"/>
    <UpToDateCheckInput Include="$(MSBuildProjectDirectory)\..\..\..\..\postsharp.config" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\postsharp.config')"/>
    <UpToDateCheckInput Include="$(MSBuildProjectDirectory)\..\..\..\..\..\postsharp.config" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\..\postsharp.config')"/>
    <UpToDateCheckInput Include="$(MSBuildProjectDirectory)\..\..\..\..\..\..\postsharp.config" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\..\..\postsharp.config')"/>
    <UpToDateCheckInput Include="$(MSBuildProjectDirectory)\..\..\..\..\..\..\..\postsharp.config" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\..\..\..\postsharp.config')"/>
  </ItemGroup>


  <PropertyGroup>

    <!-- Determines whether a PostSharp project is named after the principal project. -->

    <!-- PostSharp properties -->
    <PostSharpBuild Condition="'$(PostSharpBuild)'==''">Release</PostSharpBuild>
    <PostSharpIgnoreError Condition="'$(PostSharpIgnoreError)'==''">False</PostSharpIgnoreError>
    <PostSharpFailOnUnexpectedMessage Condition="'$(PostSharpFailOnUnexpectedMessage)'==''">False</PostSharpFailOnUnexpectedMessage>
    <PostSharpIntermediateDirectory Condition="'$(PostSharpIntermediateDirectory)'==''">$(IntermediateOutputPath)PostSharp</PostSharpIntermediateDirectory>
    <PostSharpBackupDirectory Condition="'$(PostSharpBackupDirectory)'==''">$(IntermediateOutputPath)Before-PostSharp</PostSharpBackupDirectory>
    <PostSharpCleanIntermediate Condition="'$(PostSharpCleanIntermediate)'==''">False</PostSharpCleanIntermediate>
    <PostSharpSignAssembly Condition="'$(PostSharpSignAssembly)'=='' AND '$(SignAssembly)'!=''">$(SignAssembly)</PostSharpSignAssembly>
    <PostSharpSignAssembly Condition="'$(PostSharpSignAssembly)'==''">False</PostSharpSignAssembly>
    <PostSharpAttachDebugger Condition="'$(PSAD)'!=''">$(PSAD)</PostSharpAttachDebugger>
    <PostSharpAttachDebugger Condition="'$(PostSharpAttachDebugger)'==''">False</PostSharpAttachDebugger>
    <PostSharpWriteWeavingSymbols Condition="'$(PostSharpWriteWeavingSymbols)'==''">True</PostSharpWriteWeavingSymbols>
    <PostSharpSymbolFile Condition="'$(PostSharpSymbolFile)'==''">$(OutDir)$(AssemblyName).pssym</PostSharpSymbolFile>
    <PostSharpClientAttachDebugger Condition="'$(PostSharpClientAttachDebugger)'==''">False</PostSharpClientAttachDebugger>
    <PostSharpOptimizationMode Condition="'$(PostSharpOptimizationMode)'=='' AND '$(Optimize)'!='True'">OptimizeForBuildTime</PostSharpOptimizationMode>
    <PostSharpOptimizationMode Condition="'$(PostSharpOptimizationMode)'==''">OptimizeForSize</PostSharpOptimizationMode>
    <PostSharpUseHardLink Condition="'$(PostSharpUseHardLink)'==''">True</PostSharpUseHardLink>
    <PostSharpConstraintVerificationEnabled Condition="'$(PostSharpConstraintVerificationEnabled)'==''">True</PostSharpConstraintVerificationEnabled>
    <PostSharpRuntimeVerificationEnabled Condition="'$(PostSharpRuntimeVerificationEnabled)'=='' AND '$(Optimize)'!='True'">True</PostSharpRuntimeVerificationEnabled>
    <PostSharpRuntimeVerificationEnabled Condition="'$(PostSharpRuntimeVerificationEnabled)'==''">False</PostSharpRuntimeVerificationEnabled>
    <SkipPostSharp Condition="'$(SkipPostSharp)'==''">False</SkipPostSharp>
    <PostSharpChangeAppConfigDisabled Condition="'$(PostSharpChangeAppConfigDisabled)'==''">False</PostSharpChangeAppConfigDisabled>
    <PostSharpMutexTimeout Condition="'$(PostSharpMutexTimeout)' == ''">600000</PostSharpMutexTimeout>
    <PostSharpPipeTimeout Condition="'$(PostSharpPipeTimeout)' == ''">600000</PostSharpPipeTimeout>
    <PostSharpLockedFileTimeout Condition="'$(PostSharpLockedFileTimeout)' == ''">60000</PostSharpLockedFileTimeout>
    <PostSharpLockedFileWarningTimeout Condition="'$(PostSharpLockedFileWarningTimeout)' == ''">250</PostSharpLockedFileWarningTimeout>
    <!-- Always disable when build from VS2015 and older. -->
    <PostSharpDebuggerExtensionsMode Condition="'$(PostSharpVsixVersion)'!='' AND '$(MSBuildToolsVersion)' != 'Current' AND '$(MSBuildToolsVersion)' &lt; '14.0' ">Disabled</PostSharpDebuggerExtensionsMode>
    <!-- Enable when optimizations are disabled and pdb enabled. -->
    <PostSharpDebuggerExtensionsMode Condition="'$(PostSharpDebuggerExtensionsMode)'=='' AND '$(Optimize)'!='True' AND '$(DebugType)' != 'None'">Enabled</PostSharpDebuggerExtensionsMode>
    <!-- Disabled otherwise. -->
    <PostSharpDebuggerExtensionsMode Condition="'$(PostSharpDebuggerExtensionsMode)'==''">Disabled</PostSharpDebuggerExtensionsMode>
    <PostSharpSupportedCSharpVersion>7.3</PostSharpSupportedCSharpVersion>
    <PostSharpSupportedVBVersion>15.5</PostSharpSupportedVBVersion>
    <_PostSharpBuildDependenciesFile>$(PostSharpIntermediateDirectory)\dependencies.txt</_PostSharpBuildDependenciesFile>
    <_PostSharpTouchFile>$(PostSharpIntermediateDirectory)\touch</_PostSharpTouchFile>

    <!-- Disabling restore of compiler's build-time dependencies. -->
    <PostSharpBuildTimeDependencyRestoreDisabled Condition="'$(PostSharpBuildTimeDependencyRestoreDisabled)' == '' AND '$(POSTSHARPHOST_DEPS_RESTORE)' == 'Disabled'">True</PostSharpBuildTimeDependencyRestoreDisabled>
    <PostSharpBuildTimeDependencyRestoreDisabled Condition="'$(PostSharpBuildTimeDependencyRestoreDisabled)' == ''">False</PostSharpBuildTimeDependencyRestoreDisabled>  
    
    <!-- Attempt to detect .NET Core SDK version and directory. -->
    <_PostSharpNETCoreSdkFile Condition="Exists($(NETCoreSdkBundledVersionsProps))">$([System.IO.Path]::GetFullPath($(NETCoreSdkBundledVersionsProps)))</_PostSharpNETCoreSdkFile>
    <_PostSharpNETCoreSdkFile Condition="Exists($(NETCoreSdkBundledCliToolsProps))">$([System.IO.Path]::GetFullPath($(NETCoreSdkBundledCliToolsProps)))</_PostSharpNETCoreSdkFile>
    <PostSharpNETCoreSdkDirectory Condition="'$(PostSharpNETCoreSdkDirectory)' == '' AND '$(_PostSharpNETCoreSdkFile)' != ''">$([System.IO.Path]::GetDirectoryName($(_PostSharpNETCoreSdkFile)))</PostSharpNETCoreSdkDirectory>
    <PostSharpNETCoreSdkVersion Condition="'$(PostSharpNETCoreSdkVersion)' == '' AND '$(DotNetCoreSdkVersion)' != ''">$(DotNetCoreSdkVersion)</PostSharpNETCoreSdkVersion>
    <PostSharpNETCoreSdkVersion Condition="'$(PostSharpNETCoreSdkVersion)' == '' AND '$(NETCoreSdkVersion)' != ''">$(NETCoreSdkVersion)</PostSharpNETCoreSdkVersion>
    <PostSharpNETCoreSdkVersion Condition="'$(PostSharpNETCoreSdkVersion)' == '' AND '$(_PostSharpNETCoreSdkFile)' != ''">$([System.IO.Path]::GetFileName($(_PostSharpNETCoreSdkFile)))</PostSharpNETCoreSdkVersion>
</PropertyGroup>


  <!-- Settings that depend on the target framework -->
  <Choose>
    <When Condition="'$(_IsNETCoreOrNETStandard)'!='true'">
      <PropertyGroup>
        <PostSharpToolsFrameworkIdentifier>net</PostSharpToolsFrameworkIdentifier>
        <PostSharpToolsFrameworkVersion>471</PostSharpToolsFrameworkVersion>
        <PostSharpTargetProcessor Condition="'$(PostSharpTargetProcessor)'=='' AND ( '$(PlatformTarget)'=='AMD64' OR '$(PlatformTarget)'=='x64')">x64</PostSharpTargetProcessor>
        <PostSharpTargetProcessor Condition="'$(PostSharpTargetProcessor)'==''">x86</PostSharpTargetProcessor>
        <PostSharpUsePipeServer Condition="'$(PostSharpHost)'=='Native'">False</PostSharpUsePipeServer>
        <PostSharpUsePipeServer Condition="'$(PostSharpUsePipeServer)'==''">True</PostSharpUsePipeServer>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <PostSharpToolsFrameworkIdentifier>netcoreapp</PostSharpToolsFrameworkIdentifier>
        <PostSharpToolsFrameworkVersion>2.1</PostSharpToolsFrameworkVersion>
        <PostSharpUsePipeServer>False</PostSharpUsePipeServer>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Settings that depend on the framework running MSBuild -->
  <Choose>
    <When Condition="$(MSBuildBinPath.Contains('\dotnet\sdk\'))">
      <PropertyGroup>
        <PostSharpTasksFramework>netcoreapp2.1</PostSharpTasksFramework>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <PostSharpTasksFramework>net471</PostSharpTasksFramework>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <PostSharpToolsFramework>$(PostSharpToolsFrameworkIdentifier)$(PostSharpToolsFrameworkVersion)</PostSharpToolsFramework>
    <_PostSharpBinDirectoryName>bin.$(PostSharpBuild)\tools\$(PostSharpToolsFramework)</_PostSharpBinDirectoryName>
    <_PostSharpMSBuildAssemblyName>PostSharp.MSBuild.v$(PostSharpVersion).$(PostSharpBuild).dll</_PostSharpMSBuildAssemblyName>
    <_PostSharpMSBuildAssemblyInternalPath>$(MSBuildThisFileDirectory)\bin.$(PostSharpBuild)\tools\$(PostSharpTasksFramework)\$(_PostSharpMSBuildAssemblyName)</_PostSharpMSBuildAssemblyInternalPath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(PostSharpToolsDirectory)'=='' AND Exists('$(_PostSharpMSBuildAssemblyInternalPath)')">
    <!-- Sets the tool directory in PostSharp's own development environment -->
    <PostSharpToolsDirectory>$(MSBuildThisFileDirectory)</PostSharpToolsDirectory>
    <PostSharpMSBuildAssemblyPath>$(_PostSharpMSBuildAssemblyInternalPath)</PostSharpMSBuildAssemblyPath>
    <PostSharpProgramDataDirectory>$(MSBuildThisFileDirectory)\Temp</PostSharpProgramDataDirectory>
  </PropertyGroup>

  <PropertyGroup Condition="'$(PostSharpProgramDataDirectory)'==''">
    <!--Set extract directory for Windows Vista and later -->
    <PostSharpProgramDataDirectory Condition="'$(PostSharpProgramDataDirectory)'=='' AND '$(PROGRAMDATA)'!=''">$(PROGRAMDATA)\PostSharp</PostSharpProgramDataDirectory>
    <!--Set extract directory for Windows XP -->
    <PostSharpProgramDataDirectory Condition="'$(PostSharpProgramDataDirectory)'=='' AND '$(LOCALAPPDATA)'!=''">$(LOCALAPPDATA)\PostSharp</PostSharpProgramDataDirectory>
    <!--Fallback to TEMP directory -->
    <PostSharpProgramDataDirectory Condition="'$(PostSharpProgramDataDirectory)'==''">$(TEMP)\PostSharp</PostSharpProgramDataDirectory>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Set default location of compiler's built-time dependencies. -->
    <PostSharpBuildTimeDependencyDirectory Condition="'$(PostSharpBuildTimeDependencyDirectory)' == ''">$(PostSharpProgramDataDirectory)\NuGetFallback</PostSharpBuildTimeDependencyDirectory>
  </PropertyGroup>

  <PropertyGroup Condition="'$(PostSharpToolsDirectory)'==''">
    <_ZipKeyFile>$(MSBuildThisFileDirectory)\$(PostSharpToolsFramework)\PostSharp.Compiler.Engine.dll</_ZipKeyFile>
    <!--We are working with the ZIP distribution-->
    <PostSharpToolsDirectory Condition="Exists('$(_ZipKeyFile)')">$(MSBuildThisFileDirectory)</PostSharpToolsDirectory>
  </PropertyGroup>

  <PropertyGroup Condition="'$(PostSharpToolsDirectory)'==''">
    <!--We are working with the NuGet distribution-->
    <_PostSharpExtractDirectory>$(PostSharpProgramDataDirectory)\$(PostSharpVersion)</_PostSharpExtractDirectory>
    <PostSharpToolsDirectory>$(_PostSharpExtractDirectory)</PostSharpToolsDirectory>
  </PropertyGroup>

  <PropertyGroup Condition="'$(PostSharpMSBuildAssemblyPath)'==''">
    <PostSharpMSBuildAssemblyPath>$(MSBuildThisFileDirectory)\$(PostSharpTasksFramework)\$(_PostSharpMSBuildAssemblyName)</PostSharpMSBuildAssemblyPath>
  </PropertyGroup>

  <PropertyGroup>
    <_PostSharpDebugType>$(DebugType)</_PostSharpDebugType>
    <!-- PostSharp always requires a PDB file for message resolution and VCS licensing control -->
    <DebugType Condition="'$(DebugType)'=='none'">pdbonly</DebugType>
  </PropertyGroup>
</Project>
